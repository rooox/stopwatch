{"version":3,"sources":["App.js","serviceWorker.js","index.js","stopwatch.svg"],"names":["App","_this2","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getSeconds","state","secondsElapsed","slice","getMinutes","Math","floor","handleStartTimer","setState","startEnabled","stopEnabled","clearEnabled","lapEnabled","_this","assertThisInitialized","incrementer","setInterval","handleStopTimer","clearInterval","handleClearTimer","laps","handleLap","val","accLaps","push","console","log","running","_this3","displayLaps","map","lap","index","react_default","a","createElement","key","className","concat","src","stopwatch","alt","disabled","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.ea679897.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport stopwatch from \"./stopwatch.svg\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      running: \"false\",\n      secondsElapsed: 0,\n      startEnabled: true,\n      stopEnabled: true,\n      clearEnabled: true,\n      lapEnabled: false,\n      laps: []\n    };\n  }\n  getSeconds = () => {\n    return (\"0\" + (this.state.secondsElapsed % 60)).slice(-2);\n  };\n\n  getMinutes = () => {\n    return Math.floor(this.state.secondsElapsed / 60);\n  };\n\n  handleStartTimer = () => {\n    this.setState({\n      startEnabled: false,\n      stopEnabled: true,\n      clearEnabled: true,\n      lapEnabled: true\n    });\n    let _this = this;\n    this.incrementer = setInterval(() => {\n      _this.setState({\n        secondsElapsed: this.state.secondsElapsed + 1\n      });\n    }, 1000);\n  };\n\n  handleStopTimer = () => {\n    this.setState({\n      startEnabled: true,\n      stopEnabled: false,\n      clearEnabled: true,\n      lapEnabled: false\n    });\n    clearInterval(this.incrementer);\n  };\n\n  handleClearTimer = () => {\n    this.setState({\n      startEnabled: true,\n      stopEnabled: true,\n      clearEnabled: false,\n      lapEnabled: false\n    });\n    clearInterval(this.incrementer);\n    this.setState({ secondsElapsed: 0, laps: [] });\n  };\n\n  handleLap = val => {\n    let accLaps = this.state.laps;\n    accLaps.push(val);\n    this.setState({ laps: accLaps });\n    console.log(this.state.laps);\n  };\n\n  render() {\n    let displayLaps = this.state.laps.map((lap, index) => {\n      return (\n        <div key={lap} className=\"lap_container\">\n          <p className=\"lap_number\">{`Lap ${index + 1}`}</p>\n          <p className=\"lap_number\">|</p>\n          <p className=\"lap_time\">{lap}</p>\n        </div>\n      );\n    });\n    return (\n      <div className=\"App\">\n        <div className=\"stopwatch_container\">\n          <div className=\"icon_title_container\">\n            <img src={stopwatch} alt=\"stopwatch logo\" className=\"stopwatch\" />\n            <h4 className=\"title\">STOPWATCH</h4>\n          </div>\n          <p className=\"time\">\n            {this.getMinutes()}:{this.getSeconds()}\n          </p>\n          <button\n            className=\"start\"\n            disabled={!this.state.startEnabled}\n            onClick={() => this.handleStartTimer()}\n          >\n            START\n          </button>\n          <button\n            className=\"stop\"\n            disabled={!this.state.stopEnabled}\n            onClick={() => this.handleStopTimer()}\n          >\n            STOP\n          </button>\n          <button\n            className=\"clear\"\n            disabled={!this.state.clearEnabled}\n            onClick={() => this.handleClearTimer()}\n          >\n            {\" \"}\n            CLEAR\n          </button>\n          <button\n            className=\"lap_button\"\n            disabled={this.state.startEnabled}\n            onClick={() =>\n              this.handleLap(`${this.getMinutes()}:${this.getSeconds()}`)\n            }\n          >\n            {\" \"}\n            LAP{\" \"}\n          </button>\n          <div className=\"laps_container\">{displayLaps}</div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/stopwatch.e9c15131.svg\";"],"sourceRoot":""}